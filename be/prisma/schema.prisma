generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model trainers {
  trainer_id     Int        @id @default(autoincrement())
  name           String     @db.VarChar(100)
  email          String     @unique @db.VarChar(100)
  password       String     @db.VarChar(100)
  specialization String?    @db.VarChar(100)
  workouts       workouts[]
  
}

model users {
  user_id          Int              @id @default(autoincrement())
  username         String           @unique
  full_name        String
  email            String           @unique
  password         String
  phone_number     String?
  profile_image    String?
  weight           Float?           // Use Float for Decimal in PostgreSQL
  height           Float?           // Use Float for Decimal in PostgreSQL
  gender           Gender
  role             Role
  fitness_goal     FitnessGoal
  fitness_level    FitnessLevel
  bmi              Float?           // Use Float for Decimal in PostgreSQL
  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt
  health_issues    String?
  activity_level   ActivityLevel
  workout_preference WorkoutPreference
  reset_token      String?          // Add this line for reset token
  reset_token_expiry DateTime?      // Optional: You can also add expiry time for the reset token

   // Relationship with workouts
  assigned_workouts workouts[] @relation("UserWorkouts")
}

enum Gender {
  male
  female
  other
}

enum Role {
  member
  trainer
  admin
}

enum FitnessGoal {
  gain
  maintain
  loss
}

enum FitnessLevel {
  Beginner
  Intermediate
  Advanced
}

enum ActivityLevel {
  sedentary
  lightly_active
  active
  very_active
}

enum WorkoutPreference {
  strength
  cardio
  hiit
  yoga
  mixed
}


model workouts {
  workout_id        Int       @id @default(autoincrement())
  workout_name      String    @db.VarChar(100)
  workout_level     String?   @db.VarChar(50) // e.g., Beginner, Intermediate, Advanced
  description       String?   // A brief description of the workout
  sets              Int
  reps              Int
  image_urls        String[]  // Array for multiple image URLs
  video_url         String?   // URL for workout video
  target_body_part  String?   // E.g., Chest, Legs, Back
  difficulty        String?   // E.g., Easy, Medium, Hard
  workout_group     String?   // E.g., Cardio, Strength Training, etc.
  trainer_id        Int?
  trainers          trainers?  @relation(fields: [trainer_id], references: [trainer_id], onDelete: NoAction, onUpdate: NoAction)

  // Relationship with users
  users             users[] @relation("UserWorkouts")
}